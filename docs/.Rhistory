knitr::opts_chunk$set(echo = TRUE)
require(cRacle)
cRacle
require(raster)
clim = getData('worldclim', var='bio', res=2.5, path=tempdir())
require(rinat)
require(rgbif)
site.coord = matrix(ncol=2, nrow=1)
site.coord = c(44.258885, -71.317860)
loc.name = "Mt_Washington"
boundary = c( site.coord[1]-0.001,
site.coord[2]-0.001,
site.coord[1]+0.001,
site.coord[2]+0.001 ) ## Approximately a 100mx100m area. Distorted at higher latitudes
inatq = get_inat_obs(taxon_name = "Tracheophyta",
bounds=boundary, maxresults  =5000)
inatq = get_inat_obs(taxon_name = "Tracheophyta",
bounds=boundary, maxresults  =5000)
#filters
#cultivated?
inatq = inatq[which(inatq$captive_cultivated=='false'),]
#research grade
inatq = inatq[which(inatq$quality_grade=='research'),]
#research grade
inatq = inatq[which(inatq$quality_grade=='research'),]
#positional accuracy
inatq = inatq[which(inatq$positional_accuracy<200),]
##And query GBIF for same bounds:
key <- name_backbone(name='',kingdom='plantae')$kingdomKey
##And query GBIF for same bounds:
key <- name_backbone(name='',kingdom='plantae')$kingdomKey
s.gbif = occ_data(kingdomKey = key, geometry=boundary[c(2,1,4,3)], limit=2000)
s.gbif = occ_data(kingdomKey = key, geometry=boundary[c(2,1,4,3)], limit=2000)
#And MERGE iNaturalist and GBIF obs:
t_names = unique(c(unique(inatq$scientific_name),
unique(s.gbif$data$name)))
#And MERGE iNaturalist and GBIF obs:
t_names = unique(c(unique(inatq$scientific_name),
unique(s.gbif$data$name)))
sp_bi = t_names[grep(' ', t_names)]
sp_bi = sort(sp_bi)
print(sp_bi)
unique(s.gbif$data$name)
unique(inatq$scientific_name)
t_names = unique(inatq$scientific_name)
sp_bi = t_names[grep(' ', t_names)]
sp_bi = sort(sp_bi)
sp_bi
require(rinat)
site.coord = matrix(ncol=2, nrow=1)
site.coord = c(44.258885, -71.317860)
loc.name = "Mt_Washington"
boundary = c( site.coord[1]-0.001,
site.coord[2]-0.001,
site.coord[1]+0.001,
site.coord[2]+0.001 ) ## Approximately a 100mx100m area. Distorted at higher latitudes
inatq = get_inat_obs(taxon_name = "Tracheophyta",
bounds=boundary, maxresults  =5000)
#filters
#cultivated?
inatq = inatq[which(inatq$captive_cultivated=='false'),]
#research grade
inatq = inatq[which(inatq$quality_grade=='research'),]
#positional accuracy
inatq = inatq[which(inatq$positional_accuracy<200),]
t_names = unique(inatq$scientific_name)
sp_bi = t_names[grep(' ', t_names)]
sp_bi = sort(sp_bi)
print(sp_bi)
#Before that we need to crop the clim object to our study area:
clim = crop(clim, extent(c(boundary[2]-10, boundary[4]+10,boundary[1]-10, boundary[3]+10)))
extr = getextr(
sp_bi,
clim,
repo=c('gbif', 'inat'), #query GBIF and iNaturalist together
maxrec = 1200, #Should set higher in practice!
schema = 'flat', #Spatial thinning by grid
factor = 4, #merge grid to 2x (5 arcmin in example) for thinning
nmin = 15, #minimum number of occurrence records required per species
parallel = FALSE #if you have parallel architecture you can take advantage here
)
densall = dens_obj(extr,
clim,
manip = 'condi',
kern = 'gaussian',
bg.n = 90) #consider using parallel=TRUE if bg.n>500
count
count=plyr::count(extr$tax)
count
which(count$freq>15)
sp_bi[which(count$freq>15)]
sp_bi = sp_bi[which(count$freq>15)]
tax = which(count$freq >=15)
tax
sub = count$x[tax]
sub
extr2=extr[extr$tax %in% sub,]
nrow(extr2)
nrow(extr)
plyr::count
plyr::count(extr2)
plyr::count(extr2$tax)
extr=extr[extr$tax %in% sub,]
densall = dens_obj(extr,
clim,
manip = 'condi',
kern = 'gaussian',
bg.n = 90) #consider using parallel=TRUE if bg.n>500
and
and = and_fun(densall)
optim = get_optim(and)
print(optim$origk) #As implemented in Harbert and Nixon, 2015
print(optim$conintkde) #with 95% confidence intervals on the likelihood distribution.
n = 1
multiplot(densall, names(clim)[[n]], l.cex=0.3)
addplot(and, names(clim)[[n]], col = 'black')
= 1
n = 1
multiplot(densall, names(clim)[[n]], l.cex=0.3)
addplot(and, names(clim)[[n]], col = 'black')
abline(v = median(optim$origk[, n]), col = 'green') #Midpoint will be very close to the optimum. Original method of Harbert and Nixon, 2015 returned a top 1% range to introduce some slop
sp_bi
extr = getextr(
sp_bi,
clim,
repo=c('gbif', 'inat'), #query GBIF and iNaturalist together
maxrec = 1200, #Should set higher in practice!
schema = 'flat', #Spatial thinning by grid
factor = 4, #merge grid to 2x (5 arcmin in example) for thinning
nmin = 15, #minimum number of occurrence records required per species
parallel = FALSE #if you have parallel architecture you can take advantage here
)
nrow(extr)
unique(extr$tax)
count=plyr::count(extr$tax)
tax = which(count$freq >=15)
sub = count$x[tax]
extr=extr[extr$tax %in% sub,]
densall = dens_obj(extr,
clim,
manip = 'condi',
kern = 'gaussian',
bg.n = 90) #consider using parallel=TRUE if bg.n>500
```{r}
and = and_fun(densall)
optim = get_optim(and)
print(optim$origk) #As implemented in Harbert and Nixon, 2015
print(optim$conintkde) #with 95% confidence intervals on the likelihood distribution.
n = 1
multiplot(densall, names(clim)[[n]], l.cex=0.3)
addplot(and, names(clim)[[n]], col = 'black')
n = 1
multiplot(densall, names(clim)[[n]], l.cex=0.3)
addplot(and, names(clim)[[n]], col = 'black')
abline(v = median(optim$origk[, n]), col = 'green') #Midpoint will be very close to
extr = getextr(
sp_bi,
clim,
repo=c('gbif', 'inat'), #query GBIF and iNaturalist together
maxrec = 1200, #Should set higher in practice!
schema = 'flat', #Spatial thinning by grid
factor = 4, #merge grid to 2x (5 arcmin in example) for thinning
nmin = 15, #minimum number of occurrence records required per species
parallel = FALSE #if you have parallel architecture you can take advantage here
)
require(rnoaa);
require(ggplot2);
install.packages('rnoaa')
getwd()
setwd('C:/Users/rharbert/Documents/GitHub/bioinformatics/docs/')
slidify('bio_data_sci.Rmd')
library(slidify)
install.packages('slidify')
?knitr::includ_graphics()
?knitr::include_graphics()
```{r, echo=FALSE, fig.width = 90}
```{r, echo=FALSE, fig.width = 9, units='inches'}
knitr::include_graphics("images/journal.pbio.1002195.g001.png")
```{r, echo=FALSE, fig.width = 9, units='inches'}
```{r, echo=FALSE, fig.width = 9}
```{r, echo=FALSE, fig.width = 9}
knitr::include_graphics("images/journal.pbio.1002195.g001.png")
```
